class Solution {
    static int rows;
    static int cols;
    public static void DFS(int row,int col,int newcolor,int curcolor,boolean vis[][],int image[][]){
        if(row<0 || row>=rows || col<0 || col>=cols){
            return;
        }  
        if(image[row][col]!=curcolor){    
            return;          
        }      
        if(vis[row][col]){   
            return;    
        }    
        vis[row][col]=true; 
        image[row][col]=newcolor;  
        // visit neighbour up right,down,left
        int adjList[][]={{row-1,col},{row,col+1},{row+1,col},{row,col-1}};
        for(int neigh[]:adjList){
            DFS(neigh[0],neigh[1],newcolor,curcolor,vis,image);
        }
    }
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        rows=image.length;
        cols=image[0].length;
        boolean vis[][]=new boolean[rows][cols];
        DFS(sr, sc, color,image[sr][sc],vis,image);
        return image;
    }
}
