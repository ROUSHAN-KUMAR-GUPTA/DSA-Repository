
class Solution {
    int rows;
    int cols;
    int val;
    public int DFS(int row,int col,int grid[][],boolean vis[][]){
        if(row<0 || row>=rows || col<0||col>=cols || grid[row][col]==0 ||vis[row][col]){  
            return 0;  
        }      
        vis[row][col]=true;   
        val++;   
        int adjList[][]={  
            {row-1,col},{row+1,col},{row,col-1},{row,col+1}
        };
        for(int neigh[]:adjList){
            DFS(neigh[0],neigh[1],grid,vis);
        }
        return val;

    }
    public int maxAreaOfIsland(int[][] grid) {
        rows=grid.length;
        cols=grid[0].length;
        boolean vis[][]=new boolean [rows][cols];
        int res=0;
        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                if(grid[i][j]==1 && !vis[i][j]){
                    val=0;
                    int maxArea=DFS(i,j,grid,vis);
                    res=Math.max(maxArea,res);
                }
            }
        }
        return res;
    }
}
